#include "/Engine/Public/Platform.ush"
#include "FFT.ush"

uint MapSize;
float Time;
StructuredBuffer<float2> H0Buffer;
RWTexture2D<float4> H0DebugTexture;

[numthreads(8, 8, 1)]
void DebugH0CS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;
	uint Index = PixelCoord.y * MapSize + PixelCoord.x; // Structured Buffer index corresponding wave number k

	const float SCALE = 100.0f; // デフォルトのパラメータ設定でおおよそ結果がきれいに見える値
    H0DebugTexture[PixelCoord] = float4(H0Buffer[Index].x * SCALE, H0Buffer[Index].y * SCALE, 0.0, 1.0);
}

StructuredBuffer<float2> HtBuffer;
RWTexture2D<float4> HtDebugTexture;

[numthreads(8, 8, 1)]
void DebugHtCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;
	uint Index = PixelCoord.y * MapSize + PixelCoord.x; // Structured Buffer index corresponding wave number k

	const float SCALE = 100.0f; // デフォルトのパラメータ設定でおおよそ結果がきれいに見える値
	HtDebugTexture[PixelCoord] = float4(HtBuffer[Index].x * SCALE, HtBuffer[Index].y * SCALE, 0.0, 1.0);
    //HtDebugTexture[PixelCoord] = float4(1.0f, 0.0f, 0.0, 1.0);
}

StructuredBuffer<float2> DkxBuffer;
RWTexture2D<float4> DkxDebugTexture;

[numthreads(8, 8, 1)]
void DebugDkxCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;
	uint Index = PixelCoord.y * MapSize + PixelCoord.x; // Structured Buffer index corresponding wave number k

	const float SCALE = 100.0f; // デフォルトのパラメータ設定でおおよそ結果がきれいに見える値
	DkxDebugTexture[PixelCoord] = float4(DkxBuffer[Index].x * SCALE, DkxBuffer[Index].y * SCALE, 0.0, 1.0);
    //DkxDebugTexture[PixelCoord] = float4(0.0f, 1.0f, 0.0, 1.0);
}

StructuredBuffer<float2> DkyBuffer;
RWTexture2D<float4> DkyDebugTexture;

[numthreads(8, 8, 1)]
void DebugDkyCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;
	uint Index = PixelCoord.y * MapSize + PixelCoord.x; // Structured Buffer index corresponding wave number k

	const float SCALE = 100.0f; // デフォルトのパラメータ設定でおおよそ結果がきれいに見える値
	DkyDebugTexture[PixelCoord] = float4(DkyBuffer[Index].x * SCALE, DkyBuffer[Index].y * SCALE, 0.0, 1.0);
    //DkyDebugTexture[PixelCoord] = float4(0.0f, 0.0f, 1.0, 1.0);
}

StructuredBuffer<float> OmegaBuffer;
RWStructuredBuffer<float2> OutHtBuffer;
RWStructuredBuffer<float2> OutDkxBuffer;
RWStructuredBuffer<float2> OutDkyBuffer;

[numthreads(8, 8, 1)]
void UpdateSpectrumCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;
	uint Index = PixelCoord.y * MapSize + PixelCoord.x; // Structured Buffer index corresponding wave number k
	uint MinusIndex = (MapSize - PixelCoord.y - 1) * MapSize + (MapSize - PixelCoord.x - 1); // Structured Buffer index corresponding wave number -k

	// H(k, 0)からのH(k, t)への時間発展。H(k, t) = H(k, 0) * e^(i * omega * t) + Conj(H(-k, 0)) * e^(-i * omega * t)
	float2 Hk0 = H0Buffer[Index];
	float2 Hminusk0 = H0Buffer[MinusIndex];
	float SinOmega, CosOmega;
	sincos(OmegaBuffer[Index] * Time, SinOmega, CosOmega);

	float2 Hkt;
	Hkt.x = (Hk0.x + Hminusk0.x) * CosOmega - (Hk0.y + Hminusk0.y) * SinOmega;
	Hkt.y = (Hk0.x - Hminusk0.x) * SinOmega + (Hk0.y - Hminusk0.y) * CosOmega;

	// H(k, t)からのD(k, t)の計算。D(k, t) = i * k / |k| * H(k, t)
	float2 K = PixelCoord - float2(MapSize * 0.5f, MapSize * 0.5f);
	float KLen = length(K);
	if (KLen < 1e-12f)
	{
		K = float2(0.0f, 0.0f);
	}
	else
	{
		K /= KLen;
	}

	float2 iHkt = float2(Hkt.y, -Hkt.x);

	// D(k, t)は波数空間のベクトルなので、kのx方向とy方向に分けて扱う
	float2 Dkxt = K.x * float2(Hkt.y, -Hkt.x);
	float2 Dkyt = K.y * float2(Hkt.y, -Hkt.x);

	OutHtBuffer[Index] = Hkt;
	OutDkxBuffer[Index] = Dkxt;
	OutDkyBuffer[Index] = Dkyt;
}

StructuredBuffer<float2> InDkBuffer;
RWStructuredBuffer<float2> FFTWorkBufferUAV; // TODO:SharedMemoryに入れるようにしたい
float ChoppyScale;
RWStructuredBuffer<float> OutDxBuffer;
RWStructuredBuffer<float> OutDyBuffer;
RWStructuredBuffer<float> OutDzBuffer;

// bIsHorizontal = true
void CopyComplexDataSrcToLocal(inout Complex LocalBuffer[RADIX], in uint ScanIdx, uint Loc, uint Stride, uint Size, StructuredBuffer<float2> SrcBuffer)
{
	for (uint i = 0; i < RADIX; ++i)
	{
		LocalBuffer[i] = float2(0.f, 0.f);
	}
	
	uint2 Pixel = uint2(Loc, ScanIdx);

	UNROLL
	for (uint i = 0; i < RADIX; ++i, Pixel.x += Stride)
	{
		uint Index = Pixel.y * Size + Pixel.x;
		LocalBuffer[i] = SrcBuffer[Index];
	}
}

// bIsHorizontal = false
void CopyWorkBufferToLocal(inout Complex LocalBuffer[RADIX], in uint ScanIdx, uint Loc, uint Stride, uint Size)
{
	for (uint i = 0; i < RADIX; ++i)
	{
		LocalBuffer[i] = float2(0.f, 0.f);
	}
	
	uint2 Pixel = uint2(ScanIdx, Loc);

	UNROLL
	for (uint i = 0; i < RADIX; ++i, Pixel.y += Stride)
	{
		uint Index = Pixel.y * Size + Pixel.x;
		LocalBuffer[i] = FFTWorkBufferUAV[Index];
	}
}

// bIsHorizontal = true
void CopyComplexDataLocalToWorkBuffer(in Complex LocalBuffer[RADIX], uint ScanIdx, uint Loc, uint Stride, uint Size)
{
	uint2 Pixel = uint2(Loc, ScanIdx);

	UNROLL
	for (uint r = 0; r < RADIX && Pixel.x < Size; ++r, Pixel.x += Stride)
	{
		uint Index = Pixel.y * Size + Pixel.x;
		FFTWorkBufferUAV[Index] = LocalBuffer[r];
	}
}

// bIsHorizontal = false
void CopyRealDataLocalToDxBuffer(in Complex LocalBuffer[RADIX], uint ScanIdx, uint Loc, uint Stride, uint Size)
{
	uint2 Pixel = uint2(ScanIdx, Loc);
	// cos(pi * (m1 + m2))
	int SignCorrection = ((Pixel.x + Pixel.y) & 1) ? -1 : 1;

	UNROLL
	for (uint r = 0; r < RADIX && Pixel.y < Size; ++r, Pixel.y += Stride)
	{
		uint Index = Pixel.y * Size + Pixel.x;
		OutDxBuffer[Index] = LocalBuffer[r].x * SignCorrection * ChoppyScale; // 実数部のみコピー
		//OutDxBuffer[Index] = 1.0;
	}
}
// bIsHorizontal = false
void CopyRealDataLocalToDyBuffer(in Complex LocalBuffer[RADIX], uint ScanIdx, uint Loc, uint Stride, uint Size)
{
	uint2 Pixel = uint2(ScanIdx, Loc);
	// cos(pi * (m1 + m2))
	int SignCorrection = ((Pixel.x + Pixel.y) & 1) ? -1 : 1;

	UNROLL
	for (uint r = 0; r < RADIX && Pixel.y < Size; ++r, Pixel.y += Stride)
	{
		uint Index = Pixel.y * Size + Pixel.x;
		OutDyBuffer[Index] = LocalBuffer[r].x * SignCorrection * ChoppyScale; // 実数部のみコピー
		//OutDyBuffer[Index] = 1.0;
	}
}

// bIsHorizontal = false
void CopyRealDataLocalToDzBuffer(in Complex LocalBuffer[RADIX], uint ScanIdx, uint Loc, uint Stride, uint Size)
{
	uint2 Pixel = uint2(ScanIdx, Loc);
	// cos(pi * (m1 + m2))
	int SignCorrection = ((Pixel.x + Pixel.y) & 1) ? -1 : 1;

	UNROLL
	for (uint r = 0; r < RADIX && Pixel.y < Size; ++r, Pixel.y += Stride)
	{
		uint Index = Pixel.y * Size + Pixel.x;
		OutDzBuffer[Index] = LocalBuffer[r].x * SignCorrection; // 実数部のみコピー
		//OutDzBuffer[Index] = 1.0;
	}
}

[numthreads(NUMTHREADSX, 1, 1)]
void HorizontalIFFT512x512CS(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
	// ComplexFFTImage512x512を、float4チャンネルでなくfloat2チャンネルに直したもの

	const uint ThreadIdx = GroupThreadID;
	const uint ScanIdx  = GroupID;
	const uint SignalLength = SCAN_LINE_LENGTH;

	uint Head = ThreadIdx;
	const uint Stride = STRIDE;   

	Complex LocalBuffer[RADIX];

	CopyComplexDataSrcToLocal(LocalBuffer, ScanIdx, Head, Stride, SignalLength, InDkBuffer);
	GroupSharedFFT(false, LocalBuffer, SignalLength, ThreadIdx);
	CopyComplexDataLocalToWorkBuffer(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
}

[numthreads(NUMTHREADSX, 1, 1)]
void DkxVerticalIFFT512x512CS(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
	// ComplexFFTImage512x512を、float4チャンネルでなくfloat2チャンネルに直したもの

	const uint ThreadIdx = GroupThreadID;
	const uint ScanIdx  = GroupID;
	const uint SignalLength = SCAN_LINE_LENGTH;

	uint Head = ThreadIdx;
	const uint Stride = STRIDE;   

	Complex LocalBuffer[RADIX];

	CopyWorkBufferToLocal(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
	GroupSharedFFT(false, LocalBuffer, SignalLength, ThreadIdx);
	CopyRealDataLocalToDxBuffer(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
}

[numthreads(NUMTHREADSX, 1, 1)]
void DkyVerticalIFFT512x512CS(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
	// ComplexFFTImage512x512を、float4チャンネルでなくfloat2チャンネルに直したもの

	const uint ThreadIdx = GroupThreadID;
	const uint ScanIdx  = GroupID;
	const uint SignalLength = SCAN_LINE_LENGTH;

	uint Head = ThreadIdx;
	const uint Stride = STRIDE;   

	Complex LocalBuffer[RADIX];

	CopyWorkBufferToLocal(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
	GroupSharedFFT(false, LocalBuffer, SignalLength, ThreadIdx);
	CopyRealDataLocalToDyBuffer(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
}

[numthreads(NUMTHREADSX, 1, 1)]
void DkzVerticalIFFT512x512CS(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
	// ComplexFFTImage512x512を、float4チャンネルでなくfloat2チャンネルに直したもの

	const uint ThreadIdx = GroupThreadID;
	const uint ScanIdx  = GroupID;
	const uint SignalLength = SCAN_LINE_LENGTH;

	uint Head = ThreadIdx;
	const uint Stride = STRIDE;   

	Complex LocalBuffer[RADIX];

	CopyWorkBufferToLocal(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
	GroupSharedFFT(false, LocalBuffer, SignalLength, ThreadIdx);
	CopyRealDataLocalToDzBuffer(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
}

StructuredBuffer<float> InDxBuffer;
StructuredBuffer<float> InDyBuffer;
StructuredBuffer<float> InDzBuffer;
RWTexture2D<float4> OutDisplacementMap;

[numthreads(8, 8, 1)]
void UpdateDisplacementMapCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;
	uint Index = PixelCoord.y * MapSize + PixelCoord.x;

	OutDisplacementMap[PixelCoord] = float4(InDxBuffer[Index], InDyBuffer[Index], InDzBuffer[Index], 1.0);
}

float DxyzDebugAmplitude;
Texture2D<float4> InDisplacementMap;
RWTexture2D<float4> DxyzDebugTexture;

[numthreads(8, 8, 1)]
void DebugDxyzCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;

	float3 Dxyz = InDisplacementMap[PixelCoord].xyz;
	float3 DebugColor = (Dxyz + DxyzDebugAmplitude) / 2.0 / DxyzDebugAmplitude;

	DxyzDebugTexture[PixelCoord] = float4(DebugColor.r, DebugColor.g, DebugColor.b, 1.0);
}

float PatchLength;
RWTexture2D<float4> OutGradientFoldingMap;

[numthreads(8, 8, 1)]
void GenerateGradientFoldingMapCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId;
	uint2 LeftPixelCoord = uint2(max(PixelCoord.x - 1, 0), PixelCoord.y);
	uint2 RightPixelCoord = uint2(min(PixelCoord.x + 1, MapSize - 1), PixelCoord.y);
	uint2 UpPixelCoord = uint2(PixelCoord.x, max(PixelCoord.y - 1, 0));
	uint2 DownPixelCoord = uint2(PixelCoord.x, min(PixelCoord.y + 1, MapSize - 1));

	//TODO: Zの変位しか考慮していないNormalの計算方法である
	float3 Normal = float3(-(InDisplacementMap[RightPixelCoord].z - InDisplacementMap[LeftPixelCoord].z), -(InDisplacementMap[DownPixelCoord].z - InDisplacementMap[UpPixelCoord].z), PatchLength / (float) MapSize * 2.0);
	Normal = normalize(Normal);

	OutGradientFoldingMap[PixelCoord] = float4(Normal.x, Normal.y, Normal.z, 1.0);
}


uint MapWidth;
uint MapHeight;
float MeshWidth;
float MeshHeight;
float WaveLengthRow;
float WaveLengthColumn;
float Period;
float Amplitude;

[numthreads(8, 8, 1)]
void SinWaveDisplacementMap(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const float SMALL_NUMBER = 0.0001;
	const float PI = 3.1415159;

	uint2 PixelCoord = DispatchThreadId;
	uint2 XY = PixelCoord * float2(MeshWidth, MeshHeight) / uint2(MapWidth, MapHeight);

	// Update Z only
	float Z = Amplitude * sin(2.0 * PI *
	(XY.x / max(WaveLengthRow, SMALL_NUMBER)
	+ XY.y / max(WaveLengthColumn, SMALL_NUMBER)
	+ Time / max(Period, SMALL_NUMBER))
	);
    OutDisplacementMap[PixelCoord] = float4(0.0, 0.0, Z, 1.0);
}

