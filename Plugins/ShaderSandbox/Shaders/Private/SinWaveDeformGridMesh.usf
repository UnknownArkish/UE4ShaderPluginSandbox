#include "/Engine/Public/Platform.ush"

uint NumVertex;
uint NumRow;
uint NumColumn;
float WaveNumberRow;
float WaveNumberColumn;
float Frequency;
float Amplitude;
float Time;

RWBuffer<float> OutPositionVertexBuffer;

[numthreads(32, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const uint VertexIndex = DispatchThreadId.x;

	if (VertexIndex < NumVertex)
	{
		uint RowIndex = VertexIndex / (NumColumn + 1);
		uint ColumnIndex = VertexIndex % (NumColumn + 1);
        const float PI = 3.1415159;

		// Update Z only
        OutPositionVertexBuffer[3 * VertexIndex + 2] = Amplitude * sin(2.0 * PI * (RowIndex * WaveNumberRow + ColumnIndex * WaveNumberColumn + Time * Frequency));
	}
}
