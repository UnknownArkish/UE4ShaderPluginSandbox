#include "/Engine/Public/Platform.ush"

uint NumRow;
uint NumColumn;
uint NumVertex;
float GridWidth;
float GridHeight;
float SquareDeltaTime;
float Stiffness;
float Damping;
float3 PreviousInertia;
float3 WindVelocity;
float FluidDensity;
float DeltaTime;
float VertexRadius;
uint NumSphereCollision;
float4 SphereCenterAndRadiusArray[16];

Buffer<float> InAccelerationVertexBuffer;
RWBuffer<float> OutPrevPositionVertexBuffer;
RWBuffer<float> OutPositionVertexBuffer;

float3 GetCurrentVBPosition(uint VertIdx)
{
	return float3(OutPositionVertexBuffer[4 * VertIdx + 0], OutPositionVertexBuffer[4 * VertIdx + 1], OutPositionVertexBuffer[4 * VertIdx + 2]);
}

float3 GetPreviousVBPosition(uint VertIdx)
{
	return float3(OutPrevPositionVertexBuffer[4 * VertIdx + 0], OutPrevPositionVertexBuffer[4 * VertIdx + 1], OutPrevPositionVertexBuffer[4 * VertIdx + 2]);
}

void SetCurrentVBPosition(uint VertIdx, float3 Pos)
{
	OutPositionVertexBuffer[4 * VertIdx + 0] = Pos.x;
	OutPositionVertexBuffer[4 * VertIdx + 1] = Pos.y;
	OutPositionVertexBuffer[4 * VertIdx + 2] = Pos.z;
}

void SetPreviousVBPosition(uint VertIdx, float3 Pos)
{
	OutPrevPositionVertexBuffer[4 * VertIdx + 0] = Pos.x;
	OutPrevPositionVertexBuffer[4 * VertIdx + 1] = Pos.y;
	OutPrevPositionVertexBuffer[4 * VertIdx + 2] = Pos.z;
}

static const uint NUM_THREAD_X = 32;

[numthreads(NUM_THREAD_X, 1, 1)]
void Interate(uint ThreadId : SV_GroupThreadID)
{
	const float SMALL_NUMBER = 0.0001f;

	for (uint VertIdx = ThreadId; VertIdx < NumVertex; VertIdx += NUM_THREAD_X)
	{
		float3 CurrPos = GetCurrentVBPosition(VertIdx);
		float3 PrevPos = GetPreviousVBPosition(VertIdx);

		float3 NextPos;

		// 質量は変わらないという前提を置いている
		float CurrInvMass = OutPositionVertexBuffer[4 * VertIdx + 3];
		if (CurrInvMass < SMALL_NUMBER)
		{
			NextPos = CurrPos;
			// CurrPosは変えない
		}
		else
		{
			// とりあえずDampingは0.1にして0.9をかける
			float3 Acceleration = float3(-InAccelerationVertexBuffer[3 * VertIdx + 0], -InAccelerationVertexBuffer[3 * VertIdx + 1], InAccelerationVertexBuffer[3 * VertIdx + 2]); // TODO:なぜXとYの符号を反転すべきかは理解できていない
			NextPos = CurrPos + (CurrPos - PrevPos) * (1.0f - Damping) + Acceleration * SquareDeltaTime;
			CurrPos = CurrPos + float3(-PreviousInertia.x, -PreviousInertia.y, PreviousInertia.z); // TODO:なぜXとYの符号を反転すべきかは理解できていない
		}

		SetCurrentVBPosition(VertIdx, NextPos);
		SetPreviousVBPosition(VertIdx, CurrPos);
	}
}

[numthreads(1, 1, 1)]
void ApplyWind(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const float SMALL_NUMBER = 0.0001f;
	const float LIFT_COEFFICIENT = 0.2f / 100.0f; // 式がMKS単位系なので100で割る
	const float DRAG_COEFFICIENT = 0.2f / 100.0f; // 式がMKS単位系なので100で割る

	// グリッドのトライアングル単位で処理するのでセルでループする
	for (uint RowIndex = 0; RowIndex < NumRow; RowIndex++)
	{
		for (uint ColumnIndex = 0; ColumnIndex < NumColumn; ColumnIndex++)
		{
			uint LeftUpperVertIdx = RowIndex * (NumColumn + 1) + ColumnIndex;
			uint RightUpperVertIdx = LeftUpperVertIdx + 1;
			uint LeftLowerVertIdx = LeftUpperVertIdx + NumColumn + 1;
			uint RightLowerVertIdx = LeftLowerVertIdx + 1;

			float3 CurrLeftUpperVertPos = GetCurrentVBPosition(LeftUpperVertIdx);
			float3 CurrRightUpperVertPos = GetCurrentVBPosition(RightUpperVertIdx);
			float3 CurrLeftLowerVertPos = GetCurrentVBPosition(LeftLowerVertIdx);
			float3 CurrRightLowerVertPos = GetCurrentVBPosition(RightLowerVertIdx);

			float3 PrevLeftUpperVertPos = GetPreviousVBPosition(LeftUpperVertIdx);
			float3 PrevRightUpperVertPos = GetPreviousVBPosition(RightUpperVertIdx);
			float3 PrevLeftLowerVertPos = GetPreviousVBPosition(LeftLowerVertIdx);
			float3 PrevRightLowerVertPos = GetPreviousVBPosition(RightLowerVertIdx);

			float CurrLeftUpperVertInvMass = OutPositionVertexBuffer[4 * LeftUpperVertIdx + 3];
			float CurrRightUpperVertInvMass = OutPositionVertexBuffer[4 * RightUpperVertIdx + 3];
			float CurrLeftLowerVertInvMass = OutPositionVertexBuffer[4 * LeftLowerVertIdx + 3];
			float CurrRightLowerVertInvMass = OutPositionVertexBuffer[4 * RightLowerVertIdx + 3];

			// Right Upper Triangle
			{
				// CoGはCenterOfGravity。重心のこと。
				float3 CurrCoG = (CurrLeftUpperVertPos + CurrRightUpperVertPos + CurrRightLowerVertPos) / 3.0f;
				float3 PrevCoG = (PrevLeftUpperVertPos + PrevRightUpperVertPos + PrevRightLowerVertPos) / 3.0f;

				float3 WindDelta = WindVelocity * DeltaTime;

				// 環境の風および自分自身の移動で受ける空気抵抗の風を合わせたDeltaTimeでの移動量。
				float3 Delta = -(CurrCoG - PrevCoG) + WindDelta;

				// 正規化
				float3 DeltaLength = length(Delta);
				float3 DeltaDir = Delta / max(DeltaLength, SMALL_NUMBER);

				float3 Normal = cross(CurrLeftUpperVertPos - CurrRightUpperVertPos, CurrRightLowerVertPos - CurrRightUpperVertPos);
				float NormalLength = length(Normal);
				// cross積の結果のベクトルの長さは平行四辺形の面積と同じになるので
				float3 Area = NormalLength / 2;
				Normal = Normal / NormalLength;

				float Cos = dot(Normal, DeltaDir);
				float Sin = sqrt(max(0.0f, 1.0f - Cos * Cos));
				float Sin2 = Cos * Sin * 0.5f;

				// Delta方向と、Delta-Normal平面内でDeltaに垂直な方向の2つの力積を計算する。前者をDrag、後者をLiftと呼ぶ。

				float3 LiftDir = cross(cross(DeltaDir, Normal), DeltaDir);

				float3 LiftImplulse = LIFT_COEFFICIENT * FluidDensity * Area * Sin2 * LiftDir * DeltaLength * DeltaLength / DeltaTime;
				float3 DragImplulse = DRAG_COEFFICIENT * FluidDensity * Area * abs(Cos) * DeltaDir * DeltaLength * DeltaLength / DeltaTime;

				float3 NextLeftUpperVertPos;

				if (CurrLeftUpperVertInvMass < SMALL_NUMBER)
				{
					NextLeftUpperVertPos = CurrLeftUpperVertPos;
					// CurrPosは変えない
				}
				else
				{
					NextLeftUpperVertPos = CurrLeftUpperVertPos + LiftImplulse + DragImplulse;
				}

				SetCurrentVBPosition(LeftUpperVertIdx, NextLeftUpperVertPos);

				float3 NextRightUpperVertPos;

				if (CurrRightUpperVertInvMass < SMALL_NUMBER)
				{
					NextRightUpperVertPos = CurrRightUpperVertPos;
					// CurrPosは変えない
				}
				else
				{
					NextRightUpperVertPos = CurrRightUpperVertPos + LiftImplulse + DragImplulse;
				}

				SetCurrentVBPosition(RightUpperVertIdx, NextRightUpperVertPos);

				float3 NextRightLowerVertPos;

				if (CurrRightLowerVertInvMass < SMALL_NUMBER)
				{
					NextRightLowerVertPos = CurrRightLowerVertPos;
					// CurrPosは変えない
				}
				else
				{
					NextRightLowerVertPos = CurrRightLowerVertPos + LiftImplulse + DragImplulse;
				}

				SetCurrentVBPosition(RightLowerVertIdx, NextRightLowerVertPos);
			}

			// Left Lower Triangle
			{
				// CoGはCenterOfGravity。重心のこと。
				float3 CurrCoG = (CurrLeftUpperVertPos + CurrLeftLowerVertPos + CurrRightLowerVertPos) / 3.0f;
				float3 PrevCoG = (PrevLeftUpperVertPos + PrevLeftLowerVertPos + PrevRightLowerVertPos) / 3.0f;

				float3 WindDelta = WindVelocity * DeltaTime;

				// 環境の風および自分自身の移動で受ける空気抵抗の風を合わせたDeltaTimeでの移動量。
				float3 Delta = -(CurrCoG - PrevCoG) + WindDelta;

				// 正規化
				float3 DeltaLength = length(Delta);
				float3 DeltaDir = Delta / max(DeltaLength, SMALL_NUMBER);

				// Right Upperブロックと同じ方向になるように負の符号をつけている
				float3 Normal = -cross(CurrLeftUpperVertPos - CurrLeftLowerVertPos, CurrRightLowerVertPos - CurrLeftLowerVertPos);
				float NormalLength = length(Normal);
				// cross積の結果のベクトルの長さは平行四辺形の面積と同じになるので
				float3 Area = NormalLength / 2;
				Normal = Normal / NormalLength;

				float Cos = dot(Normal, DeltaDir);
				float Sin = sqrt(max(0.0f, 1.0f - Cos * Cos));
				// NvClothではLiftの係数にSin2Thetaを使うが、論文を見てもSinThetaを使っているし、そっちが計算式として妥当に感じる。
				// しかしSin2Thetaの方が結果が今のところ綺麗なのでそちらを使う。
				// TODO:謎
				float Sin2 = Cos * Sin * 0.5f;

				// Delta方向と、Delta-Normal平面内でDeltaに垂直な方向の2つの力積を計算する。前者をDrag、後者をLiftと呼ぶ。

				float3 LiftDir = cross(cross(DeltaDir, Normal), DeltaDir);

				float3 LiftImplulse = LIFT_COEFFICIENT * FluidDensity * Area * Sin2 * LiftDir * DeltaLength * DeltaLength / DeltaTime;
				float3 DragImplulse = DRAG_COEFFICIENT * FluidDensity * Area * abs(Cos) * DeltaDir * DeltaLength * DeltaLength / DeltaTime;

				float3 NextLeftUpperVertPos;

				if (CurrLeftUpperVertInvMass < SMALL_NUMBER)
				{
					NextLeftUpperVertPos = CurrLeftUpperVertPos;
					// CurrPosは変えない
				}
				else
				{
					NextLeftUpperVertPos = CurrLeftUpperVertPos + LiftImplulse + DragImplulse;
				}

				SetCurrentVBPosition(LeftUpperVertIdx, NextLeftUpperVertPos);

				float3 NextLeftLowerVertPos;

				if (CurrLeftLowerVertInvMass < SMALL_NUMBER)
				{
					NextLeftLowerVertPos = CurrLeftLowerVertPos;
					// CurrPosは変えない
				}
				else
				{
					NextLeftLowerVertPos = CurrLeftLowerVertPos + LiftImplulse + DragImplulse;
				}

				SetCurrentVBPosition(LeftLowerVertIdx, NextLeftLowerVertPos);

				float3 NextRightLowerVertPos;

				if (CurrRightLowerVertInvMass < SMALL_NUMBER)
				{
					NextRightLowerVertPos = CurrRightLowerVertPos;
					// CurrPosは変えない
				}
				else
				{
					NextRightLowerVertPos = CurrRightLowerVertPos + LiftImplulse + DragImplulse;
				}

				SetCurrentVBPosition(RightLowerVertIdx, NextRightLowerVertPos);
			}
		}
	}
}

[numthreads(1, 1, 1)]
void SolveDistanceConstraint(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const float SMALL_NUMBER = 0.0001f;

	for (uint VertIdx = 0; VertIdx < NumVertex; VertIdx++)
	{
		uint RowIndex = VertIdx / (NumColumn + 1);
		uint ColumnIndex = VertIdx % (NumColumn + 1);

		float3 CurrVertexPos = GetCurrentVBPosition(VertIdx);
		float CurrVertexInvMass = OutPositionVertexBuffer[4 * VertIdx + 3];

		// グリッドなので右方向の隣頂点と下方向の隣頂点との間のみ考慮するようにしていれば重複なくコンストレイントを処理できる

		if (ColumnIndex < NumColumn)
		{
			uint RightVertIdx = VertIdx + 1;
			float RightVertexInvMass = OutPositionVertexBuffer[4 * RightVertIdx + 3];
			if (CurrVertexInvMass > SMALL_NUMBER || RightVertexInvMass > SMALL_NUMBER)
			{
				float3 RightVertexPos = GetCurrentVBPosition(RightVertIdx);

				float RightEdgeLength = max(length(RightVertexPos - CurrVertexPos), SMALL_NUMBER); // to avoid 0 division
				float Diff = RightEdgeLength - GridWidth;

				float3 RightEdgeAxis = (RightVertexPos - CurrVertexPos) / RightEdgeLength;

				CurrVertexPos += CurrVertexInvMass / (CurrVertexInvMass + RightVertexInvMass) * Diff * RightEdgeAxis * Stiffness;
				RightVertexPos -= RightVertexInvMass / (CurrVertexInvMass + RightVertexInvMass) * Diff * RightEdgeAxis * Stiffness;

				SetCurrentVBPosition(RightVertIdx, RightVertexPos);
			}
		}

		if (RowIndex < NumRow)
		{
			uint LowerVertIdx = VertIdx + NumColumn + 1;
			float LowerVertexInvMass = OutPositionVertexBuffer[4 * LowerVertIdx + 3];
			if (CurrVertexInvMass > SMALL_NUMBER || LowerVertexInvMass > SMALL_NUMBER)
			{
				float3 LowerVertexPos = GetCurrentVBPosition(LowerVertIdx);

				float LowerEdgeLength = max(length(LowerVertexPos - CurrVertexPos), SMALL_NUMBER); // to avoid 0 division
				float Diff = LowerEdgeLength - GridHeight;

				float3 LowerEdgeAxis = (LowerVertexPos - CurrVertexPos) / LowerEdgeLength;

				CurrVertexPos += CurrVertexInvMass / (CurrVertexInvMass + LowerVertexInvMass) * Diff * LowerEdgeAxis * Stiffness;
				LowerVertexPos -= LowerVertexInvMass / (CurrVertexInvMass + LowerVertexInvMass) * Diff * LowerEdgeAxis * Stiffness;

				SetCurrentVBPosition(LowerVertIdx, LowerVertexPos);
			}
		}

		SetCurrentVBPosition(VertIdx, CurrVertexPos);
	}
}

[numthreads(1, 1, 1)]
void SolveCollision(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// TODO:複数のコリジョンが重なっていることによるめりこみ押し出しの競合についてはとりあえず考えない
	for (uint CollisionIdx = 0; CollisionIdx < NumSphereCollision; CollisionIdx++)
	{
		float4 SphereCenterAndRadius = SphereCenterAndRadiusArray[CollisionIdx];
		float3 SphereCenter = SphereCenterAndRadius.xyz;
		// 計算をシンプルにするために頂点の半径は0にしてコリジョン側の半径に頂点半径をプラスして扱う
		float SphereRadius = SphereCenterAndRadius.w + VertexRadius;
		float SquareSphereRadius = SphereRadius * SphereRadius;

		for (uint VertIdx = 0; VertIdx < NumVertex; VertIdx++)
		{
			float3 CurrVertexPos = GetCurrentVBPosition(VertIdx);

			// めりこんでいれば半径方向に押し出す
			if (dot(CurrVertexPos - SphereCenter, CurrVertexPos - SphereCenter) < SquareSphereRadius)
			{
				CurrVertexPos = SphereCenter + normalize(CurrVertexPos - SphereCenter) * SphereRadius;
			}

			SetCurrentVBPosition(VertIdx, CurrVertexPos);
		}
	}
}
