#include "/Engine/Public/Platform.ush"

static const uint MAX_CLOTH_MESH = 8;
static const uint MAX_SPHERE_COLLISION = 4;
static const float SMALL_NUMBER = 0.0001f;

uint NumIteration[MAX_CLOTH_MESH];
uint NumRow[MAX_CLOTH_MESH];
uint NumColumn[MAX_CLOTH_MESH];
uint VertexIndexOffset[MAX_CLOTH_MESH];
uint NumVertex[MAX_CLOTH_MESH];
float GridWidth[MAX_CLOTH_MESH];
float GridHeight[MAX_CLOTH_MESH];
float SquareDeltaTime[MAX_CLOTH_MESH];
float Stiffness[MAX_CLOTH_MESH];
float Damping[MAX_CLOTH_MESH];
float3 PreviousInertia[MAX_CLOTH_MESH];
float3 WindVelocity[MAX_CLOTH_MESH];
float FluidDensity[MAX_CLOTH_MESH];
float DeltaTime[MAX_CLOTH_MESH];
float VertexRadius[MAX_CLOTH_MESH];
uint NumSphereCollision[MAX_CLOTH_MESH];
float4 SphereCenterAndRadiusArray[MAX_CLOTH_MESH * MAX_SPHERE_COLLISION];

RWBuffer<float> WorkAccelerationVertexBuffer;
RWBuffer<float> WorkPrevPositionVertexBuffer;
RWBuffer<float> WorkPositionVertexBuffer;

float GetCurrentInvMass(uint MeshIdx, uint VertIdx)
{
	return WorkPositionVertexBuffer[4 * (VertexIndexOffset[MeshIdx] + VertIdx) + 3];
}

float3 GetCurrentVBPosition(uint MeshIdx, uint VertIdx)
{
	uint Idx = VertexIndexOffset[MeshIdx] + VertIdx;
	return float3(WorkPositionVertexBuffer[4 * Idx + 0], WorkPositionVertexBuffer[4 * Idx + 1], WorkPositionVertexBuffer[4 * Idx + 2]);
}

float3 GetPreviousVBPosition(uint MeshIdx, uint VertIdx)
{
	uint Idx = VertexIndexOffset[MeshIdx] + VertIdx;
	return float3(WorkPrevPositionVertexBuffer[4 * Idx + 0], WorkPrevPositionVertexBuffer[4 * Idx + 1], WorkPrevPositionVertexBuffer[4 * Idx + 2]);
}

void SetCurrentVBPosition(uint MeshIdx, uint VertIdx, float3 Pos)
{
	uint Idx = VertexIndexOffset[MeshIdx] + VertIdx;
	WorkPositionVertexBuffer[4 * Idx + 0] = Pos.x;
	WorkPositionVertexBuffer[4 * Idx + 1] = Pos.y;
	WorkPositionVertexBuffer[4 * Idx + 2] = Pos.z;
}

void SetPreviousVBPosition(uint MeshIdx, uint VertIdx, float3 Pos)
{
	uint Idx = VertexIndexOffset[MeshIdx] + VertIdx;
	WorkPrevPositionVertexBuffer[4 * Idx + 0] = Pos.x;
	WorkPrevPositionVertexBuffer[4 * Idx + 1] = Pos.y;
	WorkPrevPositionVertexBuffer[4 * Idx + 2] = Pos.z;
}

static const uint NUM_THREAD_X = 32;

void Integrate(uint MeshIdx, uint ThreadId)
{
	for (uint VertIdx = ThreadId; VertIdx < NumVertex[MeshIdx]; VertIdx += NUM_THREAD_X)
	{
		float3 CurrPos = GetCurrentVBPosition(MeshIdx, VertIdx);
		float3 PrevPos = GetPreviousVBPosition(MeshIdx, VertIdx);

		float3 NextPos;

		// 質量は変わらないという前提を置いている
		float CurrInvMass = GetCurrentInvMass(MeshIdx, VertIdx);
		if (CurrInvMass < SMALL_NUMBER)
		{
			NextPos = CurrPos;
			// CurrPosは変えない
		}
		else
		{
			// とりあえずDampingは0.1にして0.9をかける
			uint Idx = VertexIndexOffset[MeshIdx] + VertIdx;
			float3 Acceleration = float3(-WorkAccelerationVertexBuffer[4 * Idx + 0], -WorkAccelerationVertexBuffer[4 * Idx + 1], WorkAccelerationVertexBuffer[4 * Idx + 2]); // TODO:なぜXとYの符号を反転すべきかは理解できていない
			NextPos = CurrPos + (CurrPos - PrevPos) * (1.0f - Damping[MeshIdx]) + Acceleration * SquareDeltaTime[MeshIdx];
			CurrPos = CurrPos + float3(-PreviousInertia[MeshIdx].x, -PreviousInertia[MeshIdx].y, PreviousInertia[MeshIdx].z); // TODO:なぜXとYの符号を反転すべきかは理解できていない
		}

		SetCurrentVBPosition(MeshIdx, VertIdx, NextPos);
		SetPreviousVBPosition(MeshIdx, VertIdx, CurrPos);
	}
}

void ApplyWind(uint MeshIdx, uint ThreadId)
{
	const float LIFT_COEFFICIENT = 0.2f / 100.0f; // 式がMKS単位系なので100で割る
	const float DRAG_COEFFICIENT = 0.2f / 100.0f; // 式がMKS単位系なので100で割る

	// グリッドのトライアングル単位で処理するのでセルでループする

#if 0
	// TODO:若干マルチスレッドをすると動きがくしゃくしゃなる兆候が見られたのでとりあえずマルチスレッド対応は後回し
	for (uint RowColumnIndex = ThreadId; RowColumnIndex < NumRow * NumColumn; RowColumnIndex += NUM_THREAD_X)
#else
	if (ThreadId > 0)
	{
		return;
	}

	for (uint RowColumnIndex = 0; RowColumnIndex < NumRow[MeshIdx] * NumColumn[MeshIdx]; RowColumnIndex++)
#endif
	{
		uint RowIndex = RowColumnIndex / NumColumn[MeshIdx];
		uint ColumnIndex = RowColumnIndex % NumColumn[MeshIdx];
		uint LeftUpperVertIdx = RowIndex * (NumColumn[MeshIdx] + 1) + ColumnIndex;
		uint RightUpperVertIdx = LeftUpperVertIdx + 1;
		uint LeftLowerVertIdx = LeftUpperVertIdx + NumColumn[MeshIdx] + 1;
		uint RightLowerVertIdx = LeftLowerVertIdx + 1;

		float3 CurrLeftUpperVertPos = GetCurrentVBPosition(MeshIdx, LeftUpperVertIdx);
		float3 CurrRightUpperVertPos = GetCurrentVBPosition(MeshIdx, RightUpperVertIdx);
		float3 CurrLeftLowerVertPos = GetCurrentVBPosition(MeshIdx, LeftLowerVertIdx);
		float3 CurrRightLowerVertPos = GetCurrentVBPosition(MeshIdx, RightLowerVertIdx);

		float3 PrevLeftUpperVertPos = GetPreviousVBPosition(MeshIdx, LeftUpperVertIdx);
		float3 PrevRightUpperVertPos = GetPreviousVBPosition(MeshIdx, RightUpperVertIdx);
		float3 PrevLeftLowerVertPos = GetPreviousVBPosition(MeshIdx, LeftLowerVertIdx);
		float3 PrevRightLowerVertPos = GetPreviousVBPosition(MeshIdx, RightLowerVertIdx);

		float CurrLeftUpperVertInvMass = GetCurrentInvMass(MeshIdx, LeftUpperVertIdx);
		float CurrRightUpperVertInvMass = GetCurrentInvMass(MeshIdx, RightUpperVertIdx);
		float CurrLeftLowerVertInvMass = GetCurrentInvMass(MeshIdx, LeftLowerVertIdx);
		float CurrRightLowerVertInvMass = GetCurrentInvMass(MeshIdx, RightLowerVertIdx);

		// Right Upper Triangle
		{
			// CoGはCenterOfGravity。重心のこと。
			float3 CurrCoG = (CurrLeftUpperVertPos + CurrRightUpperVertPos + CurrRightLowerVertPos) / 3.0f;
			float3 PrevCoG = (PrevLeftUpperVertPos + PrevRightUpperVertPos + PrevRightLowerVertPos) / 3.0f;

			float3 WindDelta = WindVelocity[MeshIdx] * DeltaTime[MeshIdx];

				// 環境の風および自分自身の移動で受ける空気抵抗の風を合わせたDeltaTimeでの移動量。
			float3 Delta = -(CurrCoG - PrevCoG) + WindDelta;

				// 正規化
			float3 DeltaLength = length(Delta);
			float3 DeltaDir = Delta / max(DeltaLength, SMALL_NUMBER);

			float3 Normal = cross(CurrLeftUpperVertPos - CurrRightUpperVertPos, CurrRightLowerVertPos - CurrRightUpperVertPos);
			float NormalLength = length(Normal);
				// cross積の結果のベクトルの長さは平行四辺形の面積と同じになるので
			float3 Area = NormalLength / 2;
			Normal = Normal / NormalLength;

			float Cos = dot(Normal, DeltaDir);
			float Sin = sqrt(max(0.0f, 1.0f - Cos * Cos));
			float Sin2 = Cos * Sin * 0.5f;

				// Delta方向と、Delta-Normal平面内でDeltaに垂直な方向の2つの力積を計算する。前者をDrag、後者をLiftと呼ぶ。

			float3 LiftDir = cross(cross(DeltaDir, Normal), DeltaDir);

			float3 LiftImplulse = LIFT_COEFFICIENT * FluidDensity[MeshIdx] * Area * Sin2 * LiftDir * DeltaLength * DeltaLength / DeltaTime[MeshIdx];
			float3 DragImplulse = DRAG_COEFFICIENT * FluidDensity[MeshIdx] * Area * abs(Cos) * DeltaDir * DeltaLength * DeltaLength / DeltaTime[MeshIdx];

			float3 NextLeftUpperVertPos;

			if (CurrLeftUpperVertInvMass < SMALL_NUMBER)
			{
				NextLeftUpperVertPos = CurrLeftUpperVertPos;
					// CurrPosは変えない
			}
			else
			{
				NextLeftUpperVertPos = CurrLeftUpperVertPos + LiftImplulse + DragImplulse;
			}

			SetCurrentVBPosition(MeshIdx, LeftUpperVertIdx, NextLeftUpperVertPos);

			float3 NextRightUpperVertPos;

			if (CurrRightUpperVertInvMass < SMALL_NUMBER)
			{
				NextRightUpperVertPos = CurrRightUpperVertPos;
					// CurrPosは変えない
			}
			else
			{
				NextRightUpperVertPos = CurrRightUpperVertPos + LiftImplulse + DragImplulse;
			}

			SetCurrentVBPosition(MeshIdx, RightUpperVertIdx, NextRightUpperVertPos);

			float3 NextRightLowerVertPos;

			if (CurrRightLowerVertInvMass < SMALL_NUMBER)
			{
				NextRightLowerVertPos = CurrRightLowerVertPos;
					// CurrPosは変えない
			}
			else
			{
				NextRightLowerVertPos = CurrRightLowerVertPos + LiftImplulse + DragImplulse;
			}

			SetCurrentVBPosition(MeshIdx, RightLowerVertIdx, NextRightLowerVertPos);
		}

		// Left Lower Triangle
		{
			// CoGはCenterOfGravity。重心のこと。
			float3 CurrCoG = (CurrLeftUpperVertPos + CurrLeftLowerVertPos + CurrRightLowerVertPos) / 3.0f;
			float3 PrevCoG = (PrevLeftUpperVertPos + PrevLeftLowerVertPos + PrevRightLowerVertPos) / 3.0f;

			float3 WindDelta = WindVelocity[MeshIdx] * DeltaTime[MeshIdx];

				// 環境の風および自分自身の移動で受ける空気抵抗の風を合わせたDeltaTimeでの移動量。
			float3 Delta = -(CurrCoG - PrevCoG) + WindDelta;

				// 正規化
			float3 DeltaLength = length(Delta);
			float3 DeltaDir = Delta / max(DeltaLength, SMALL_NUMBER);

				// Right Upperブロックと同じ方向になるように負の符号をつけている
			float3 Normal = -cross(CurrLeftUpperVertPos - CurrLeftLowerVertPos, CurrRightLowerVertPos - CurrLeftLowerVertPos);
			float NormalLength = length(Normal);
				// cross積の結果のベクトルの長さは平行四辺形の面積と同じになるので
			float3 Area = NormalLength / 2;
			Normal = Normal / NormalLength;

			float Cos = dot(Normal, DeltaDir);
			float Sin = sqrt(max(0.0f, 1.0f - Cos * Cos));
				// NvClothではLiftの係数にSin2Thetaを使うが、論文を見てもSinThetaを使っているし、そっちが計算式として妥当に感じる。
				// しかしSin2Thetaの方が結果が今のところ綺麗なのでそちらを使う。
				// TODO:謎
			float Sin2 = Cos * Sin * 0.5f;

				// Delta方向と、Delta-Normal平面内でDeltaに垂直な方向の2つの力積を計算する。前者をDrag、後者をLiftと呼ぶ。

			float3 LiftDir = cross(cross(DeltaDir, Normal), DeltaDir);

			float3 LiftImplulse = LIFT_COEFFICIENT * FluidDensity[MeshIdx] * Area * Sin2 * LiftDir * DeltaLength * DeltaLength / DeltaTime[MeshIdx];
			float3 DragImplulse = DRAG_COEFFICIENT * FluidDensity[MeshIdx] * Area * abs(Cos) * DeltaDir * DeltaLength * DeltaLength / DeltaTime[MeshIdx];

			float3 NextLeftUpperVertPos;

			if (CurrLeftUpperVertInvMass < SMALL_NUMBER)
			{
				NextLeftUpperVertPos = CurrLeftUpperVertPos;
					// CurrPosは変えない
			}
			else
			{
				NextLeftUpperVertPos = CurrLeftUpperVertPos + LiftImplulse + DragImplulse;
			}

			SetCurrentVBPosition(MeshIdx, LeftUpperVertIdx, NextLeftUpperVertPos);

			float3 NextLeftLowerVertPos;

			if (CurrLeftLowerVertInvMass < SMALL_NUMBER)
			{
				NextLeftLowerVertPos = CurrLeftLowerVertPos;
					// CurrPosは変えない
			}
			else
			{
				NextLeftLowerVertPos = CurrLeftLowerVertPos + LiftImplulse + DragImplulse;
			}

			SetCurrentVBPosition(MeshIdx, LeftLowerVertIdx, NextLeftLowerVertPos);

			float3 NextRightLowerVertPos;

			if (CurrRightLowerVertInvMass < SMALL_NUMBER)
			{
				NextRightLowerVertPos = CurrRightLowerVertPos;
					// CurrPosは変えない
			}
			else
			{
				NextRightLowerVertPos = CurrRightLowerVertPos + LiftImplulse + DragImplulse;
			}

			SetCurrentVBPosition(MeshIdx, RightLowerVertIdx, NextRightLowerVertPos);
		}
	}
}

void SolveDistanceConstraint(uint MeshIdx, uint ThreadId)
{
#if 0
	// TODO:マルチスレッドをすると動きが壊れるとりあえずマルチスレッド対応は後回し
	for (uint VertIdx = ThreadId; VertIdx < NumVertex; VertIdx += NUM_THREAD_X)
#else
	if (ThreadId > 0)
	{
		return;
	}

	for (uint VertIdx = 0; VertIdx < NumVertex[MeshIdx]; VertIdx++)
#endif
	{
		uint RowIndex = VertIdx / (NumColumn[MeshIdx] + 1);
		uint ColumnIndex = VertIdx % (NumColumn[MeshIdx] + 1);

		float3 CurrVertexPos = GetCurrentVBPosition(MeshIdx, VertIdx);
		float CurrVertexInvMass = GetCurrentInvMass(MeshIdx, VertIdx);

	// グリッドなので右方向の隣頂点と下方向の隣頂点との間のみ考慮するようにしていれば重複なくコンストレイントを処理できる

		if (ColumnIndex < NumColumn[MeshIdx])
		{
			uint RightVertIdx = VertIdx + 1;
			float RightVertexInvMass = GetCurrentInvMass(MeshIdx, RightVertIdx);
			if (CurrVertexInvMass > SMALL_NUMBER || RightVertexInvMass > SMALL_NUMBER)
			{
				float3 RightVertexPos = GetCurrentVBPosition(MeshIdx, RightVertIdx);

				float RightEdgeLength = max(length(RightVertexPos - CurrVertexPos), SMALL_NUMBER); // to avoid 0 division
				float Diff = RightEdgeLength - GridWidth[MeshIdx];

				float3 RightEdgeAxis = (RightVertexPos - CurrVertexPos) / RightEdgeLength;

				CurrVertexPos += CurrVertexInvMass / (CurrVertexInvMass + RightVertexInvMass) * Diff * RightEdgeAxis * Stiffness[MeshIdx];
				RightVertexPos -= RightVertexInvMass / (CurrVertexInvMass + RightVertexInvMass) * Diff * RightEdgeAxis * Stiffness[MeshIdx];

				SetCurrentVBPosition(MeshIdx, RightVertIdx, RightVertexPos);
			}
		}

		if (RowIndex < NumRow[MeshIdx])
		{
			uint LowerVertIdx = VertIdx + NumColumn[MeshIdx] + 1;
			float LowerVertexInvMass = GetCurrentInvMass(MeshIdx, LowerVertIdx);
			if (CurrVertexInvMass > SMALL_NUMBER || LowerVertexInvMass > SMALL_NUMBER)
			{
				float3 LowerVertexPos = GetCurrentVBPosition(MeshIdx, LowerVertIdx);

				float LowerEdgeLength = max(length(LowerVertexPos - CurrVertexPos), SMALL_NUMBER); // to avoid 0 division
				float Diff = LowerEdgeLength - GridHeight[MeshIdx];

				float3 LowerEdgeAxis = (LowerVertexPos - CurrVertexPos) / LowerEdgeLength;

				CurrVertexPos += CurrVertexInvMass / (CurrVertexInvMass + LowerVertexInvMass) * Diff * LowerEdgeAxis * Stiffness[MeshIdx];
				LowerVertexPos -= LowerVertexInvMass / (CurrVertexInvMass + LowerVertexInvMass) * Diff * LowerEdgeAxis * Stiffness[MeshIdx];

				SetCurrentVBPosition(MeshIdx, LowerVertIdx, LowerVertexPos);
			}
		}

		SetCurrentVBPosition(MeshIdx, VertIdx, CurrVertexPos);
	}
}

void SolveCollision(uint MeshIdx, uint ThreadId)
{
	const float SMALL_NUMBER = 0.0001f;

	// TODO:複数のコリジョンが重なっていることによるめりこみ押し出しの競合についてはとりあえず考えない
	for (uint VertIdx = ThreadId; VertIdx < NumVertex[MeshIdx]; VertIdx += NUM_THREAD_X)
	{
		float3 CurrVertexPos = GetCurrentVBPosition(MeshIdx, VertIdx);

		for (uint CollisionIdx = 0; CollisionIdx < NumSphereCollision[MeshIdx]; CollisionIdx++)
		{
			float4 SphereCenterAndRadius = SphereCenterAndRadiusArray[MeshIdx * MAX_SPHERE_COLLISION + CollisionIdx];
			// 計算をシンプルにするために頂点の半径は0にしてコリジョン側の半径に頂点半径をプラスして扱う
			float SphereRadius = SphereCenterAndRadius.w + VertexRadius[MeshIdx];
			if (SphereRadius < SMALL_NUMBER)
			{
				continue;
			}

			float SquareSphereRadius = SphereRadius * SphereRadius;
			float3 SphereCenter = SphereCenterAndRadius.xyz;

			// めりこんでいれば半径方向に押し出す
			if (dot(CurrVertexPos - SphereCenter, CurrVertexPos - SphereCenter) < SquareSphereRadius)
			{
				CurrVertexPos = SphereCenter + normalize(CurrVertexPos - SphereCenter) * SphereRadius;
			}
		}

		SetCurrentVBPosition(MeshIdx, VertIdx, CurrVertexPos);
	}
}

[numthreads(NUM_THREAD_X, 1, 1)]
void Main(uint MeshIdx : SV_GroupID, uint ThreadId : SV_GroupThreadID)
{
	for (uint IterCount = 0; IterCount < NumIteration[MeshIdx]; IterCount++)
	{
		Integrate(MeshIdx, ThreadId);
		GroupMemoryBarrierWithGroupSync();

		if (FluidDensity[MeshIdx] > 0.0f)
		{
			ApplyWind(MeshIdx, ThreadId);
			GroupMemoryBarrierWithGroupSync();
		}

		SolveDistanceConstraint(MeshIdx, ThreadId);
		GroupMemoryBarrierWithGroupSync();

		SolveCollision(MeshIdx, ThreadId);
		GroupMemoryBarrierWithGroupSync();
	}
}

