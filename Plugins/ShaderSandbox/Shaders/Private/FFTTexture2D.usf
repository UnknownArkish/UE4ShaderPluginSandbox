#include "/Engine/Public/Platform.ush"
#include "FFT.ush"

uint Forward;
Texture2D<float4> SrcTexture;
RWTexture2D<float4> DstTexture;
uint2 SrcRectMin;
uint2 SrcRectMax;
uint4 DstRect;

void PackLocalBuffer(inout Complex LocalComplexBuffer[RADIX], in uint Head, in uint Stride, in uint N)
{
	const uint HalfN = N / 2;
	
	CopyLocalXToGroupShared(LocalComplexBuffer, Head, Stride);
	GroupMemoryBarrierWithGroupSync();

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		FLATTEN
		uint NminusK = (K > 0) ? (N - K) : 0;

		float Tmp = SharedRealBuffer[NminusK];
		Tmp *= (K > HalfN) ? -1 : 1;
		LocalComplexBuffer[i].x += Tmp;
	}

	if (Head == 0)
	{
		LocalComplexBuffer[0].x = 2.0f * SharedRealBuffer[0];
	}

	GroupMemoryBarrierWithGroupSync();
	CopyLocalYToGroupShared(LocalComplexBuffer, Head, Stride);
	GroupMemoryBarrierWithGroupSync();

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		FLATTEN
		uint NminusK = (K > 0) ? (N - K) : 0;
		
		float Tmp = -SharedRealBuffer[NminusK];
		
		Tmp *= (K < HalfN) ? 1 : -1;

		LocalComplexBuffer[i].y += Tmp;
	}

	if (Head == 0)
	{
		LocalComplexBuffer[0].y = 2.0f * SharedRealBuffer[0];
	}

	UNROLL
	for (uint i = 0; i < RADIX; ++i)
	{
		LocalComplexBuffer[i] *= 0.5; 
	}

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		if (K > HalfN)
		{
			LocalComplexBuffer[i] = ComplexMult(Complex(0, -1), LocalComplexBuffer[i]);
		}
	}
}

void UnpackLocalBuffer(inout Complex LocalComplexBuffer[RADIX], in uint Head, in uint Stride, in uint N)
{
	uint HalfN = N / 2;

	float TmpX[RADIX];
	for (uint i = 0; i < RADIX; ++i)
	{
		TmpX[i] = LocalComplexBuffer[i].x;
	}

	CopyLocalYToGroupShared(LocalComplexBuffer, Head, Stride);

	GroupMemoryBarrierWithGroupSync();

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		FLATTEN uint NminusK = (K > 0) ? (N - K) : 0;

		float Tmp = SharedRealBuffer[NminusK];

		Tmp *= (K > HalfN) ? -1 : 1;

		LocalComplexBuffer[i].x += Tmp;
	}

	float2 FirstElement = float2(0, SharedRealBuffer[0]);
	float2 MiddleElement = float2(0, SharedRealBuffer[HalfN]);

	GroupMemoryBarrierWithGroupSync();

	UNROLL
	for (uint r = 0, i = Head; r < RADIX; ++r, i += Stride)
	{
		SharedRealBuffer[i] = TmpX[r];
	}

	GroupMemoryBarrierWithGroupSync();
	FirstElement.x = SharedRealBuffer[0];
	MiddleElement.x = SharedRealBuffer[HalfN];

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		FLATTEN uint NminusK = (K > 0) ? (N - K) : 0;

		float Tmp = SharedRealBuffer[ NminusK ]; 
		Tmp *= (K > HalfN) ? -1 : 1;
		
		LocalComplexBuffer[i].y += Tmp;
	}

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		if (K > HalfN)
		{
			LocalComplexBuffer[i] = ComplexMult(Complex(0, 1), LocalComplexBuffer[i]);
		}

		if (K == HalfN)
		{
			LocalComplexBuffer[i] = MiddleElement;
		}
	}

	if (Head == 0)
	{
		LocalComplexBuffer[0] = FirstElement;
	}
}

void CopySrcTextureToLocalBufferAndUnpack(inout Complex LocalComplexBuffer[2][RADIX], in uint ScanIdx, in uint Loc, in uint Stride, in uint N)
{
	// 0番目とN/2番目の要素はパッキングの組み合わせで余るのでパディングピクセルを使って格納しているので以下の処理で読み出す。
	const bool bIsFirstElement = (Loc == 0);
	const uint HalfN =  N / 2;

	float4 NValue = SrcTexture[uint2(N, ScanIdx)];
	float4 Nplus1Value = SrcTexture[uint2(N + 1, ScanIdx)];

	uint2 Pixel = uint2(Loc, ScanIdx);
	UNROLL
	for (uint i = 0; i < RADIX; ++i, Pixel.x += Stride)
	{
		float4 SrcValue = SrcTexture[Pixel];
		LocalComplexBuffer[0][i] = SrcValue.xy;
		LocalComplexBuffer[1][i] = SrcValue.zw;

		if (Pixel.x == HalfN)
		{
			LocalComplexBuffer[0][i] += Nplus1Value.yx;
			LocalComplexBuffer[1][i] += Nplus1Value.wz;
		}
	}

	if (bIsFirstElement)
	{
		LocalComplexBuffer[0][0] += NValue.yx;
		LocalComplexBuffer[1][0] += NValue.wz;
	}

	// その他のピクセルのアンパック
	UnpackLocalBuffer(LocalComplexBuffer[ 0 ], Loc, Stride, N);
	GroupMemoryBarrierWithGroupSync();
	UnpackLocalBuffer(LocalComplexBuffer[ 1 ], Loc, Stride, N);
	GroupMemoryBarrierWithGroupSync();
}

void PackLocalBufferAndCopyToDstTexture(inout Complex LocalComplexBuffer[2][RADIX], uint ScanIdx, uint Loc, uint Stride, uint N)
{
	GroupMemoryBarrierWithGroupSync();

	PackLocalBuffer(LocalComplexBuffer[0], Loc, Stride, N);
	GroupMemoryBarrierWithGroupSync();
	PackLocalBuffer(LocalComplexBuffer[1], Loc, Stride, N);

	// 0番目とN/2番目の要素はパッキングの組み合わせで余るので以下でパディングピクセルに格納する。
	const bool bIsFirstElement = (Loc == 0);
	const uint HalfN =  N / 2;

	uint2 Pixel = uint2(Loc, ScanIdx);
	float4 DstValue;
	UNROLL
	for (uint r = 0; r < RADIX; ++r, Pixel.x += Stride)
	{
		DstValue.xy = LocalComplexBuffer[0][r];
		DstValue.zw = LocalComplexBuffer[1][r];
		DstTexture[Pixel] = DstValue;

		if (Pixel.x == HalfN)
		{
			DstTexture[Pixel] = float4(DstValue.x, 0.0f, DstValue.z, 0.0f);
			DstTexture[uint2(N + 1, Pixel.y)] = float4(DstValue.y, 0.0f, DstValue.w, 0.0f);
		}
	}

	if (bIsFirstElement)
	{
		DstValue.xy = LocalComplexBuffer[0][0];
		DstValue.zw = LocalComplexBuffer[1][0];

		DstTexture[uint2(0, Pixel.y)] = float4(DstValue.x, 0.0f, DstValue.z, 0.0f); // F_o 
		DstTexture[uint2(N, Pixel.y)] = float4(DstValue.y, 0.0f, DstValue.w, 0.0f); // G_o 
	}
}

void CopySrcTextureToLocalBuffer(inout Complex LocalComplexBuffer[2][RADIX], in uint ScanIdx, uint Loc, uint Stride, uint4 Window)
{
	for (uint i = 0; i < RADIX; i++)
	{
		LocalComplexBuffer[0][i] = Complex(0.0f, 0.0f);
		LocalComplexBuffer[1][i] = Complex(0.0f, 0.0f);
	}

	// 行処理でしか使わない前提
	uint2 Pixel = uint2(Loc, ScanIdx) + Window.xy;
	UNROLL
	for (uint i = 0; i < RADIX; ++i, Pixel.x += Stride)
	{
		bool IsWindow = !(Pixel.x > Window.z);
		if (IsWindow)
		{
			// RGBAの4チャンネルを2つの複素数で保持する
			float4 SrcValue = SrcTexture[Pixel];
			LocalComplexBuffer[0][i] = SrcValue.xy;
			LocalComplexBuffer[1][i] = SrcValue.zw;
		}
	}
}

//const bool bIsHorizontal = false;
void CopySrcTextureToLocalBuffer(inout Complex LocalComplexBuffer[2][RADIX], uint ScanIdx, uint Loc, uint Stride, uint2 WindowMin, uint2 WindowMax)
{
	for (uint i = 0; i < RADIX; i++)
	{
		LocalComplexBuffer[0][i] = Complex(0.0f, 0.0f);
		LocalComplexBuffer[1][i] = Complex(0.0f, 0.0f);
	}

	// 列処理でしか使わない前提
	uint2 Pixel = uint2(ScanIdx, Loc) + uint2(0, WindowMin.y);
	UNROLL
	for (uint i = 0; i < RADIX; ++i, Pixel.y += Stride)
	{
		bool IsWindow = !(Pixel.y > WindowMax.y);
		if (IsWindow)
		{
			// RGBAの4チャンネルを2つの複素数で保持する
			float4 SrcValue = SrcTexture[Pixel];
			LocalComplexBuffer[0][i] = SrcValue.xy;
			LocalComplexBuffer[1][i] = SrcValue.zw;
		}
	}
}

void CopyLocalBufferToDstTexture(in Complex LocalComplexBuffer[2][RADIX], bool bIsHorizontal, in uint ScanIdx, uint Loc, uint Stride, uint4 ROIRect)
{
	if(bIsHorizontal)
	{
		uint2 Pixel = uint2(Loc + ROIRect.x, ScanIdx + ROIRect.y);

		UNROLL
		for (uint r = 0; r < RADIX && Pixel.x < ROIRect.z; ++r, Pixel.x += Stride)
		{
			float4 DstValue;
			DstValue.xy = LocalComplexBuffer[0][r];
			DstValue.zw = LocalComplexBuffer[1][r];

			DstTexture[Pixel] = DstValue;
		}
	}
	else
	{
		uint2 Pixel = uint2(ScanIdx + ROIRect.x, Loc + ROIRect.y);

		UNROLL
		for (uint r = 0; r < RADIX && Pixel.y < ROIRect.w; ++r, Pixel.y += Stride)
		{
			float4 DstValue;
			DstValue.xy = LocalComplexBuffer[0][r];
			DstValue.zw = LocalComplexBuffer[1][r];

			DstTexture[Pixel] = DstValue;
		}
	}
}

// テクスチャの横方向のラインをFFT/IFFTする。
// 実数配列限定で、FFT後のデータを半分の容量にパッキングする。
// RGBAの4実数がある場合、フーリエ変換では4複素数が出力されるのでデータの容量が倍になる。
// しかし、実数配列をフーリエ変換した場合、KとN-Kの周波数のフーリエ変換結果が複素共役になるという対称性がある。
// それを用いて、保存データを半分で済ませることで、入力テクスチャと出力テクスチャを同じ容量で済ませる。
[numthreads(NUMTHREADSX, 1, 1)]
void HalfPackFFTTexture2DHorizontal(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
	const bool bIsForward = (Forward > 0);
	// 今回は用途として行処理固定
	const bool bIsHorizontal = true;

	// 各スレッドがソーステクスチャのある行の各ピクセルデータに対応
	const uint ThreadIdx = GroupThreadID;
	// 各グループがソーステクスチャのある行に対応
	const uint LineIdx  = GroupID;

	// メモリアクセスパターン変数
	uint Head = ThreadIdx;
	const uint Stride = ARRAY_LENGTH / RADIX;

	// ワークバッファとして使う配列。各スレッドのローカル変数
	// RGとBAを2つの複素数に格納する
	Complex LocalComplexBuffer[2][RADIX];

	if (bIsForward)
	{
		uint4 SrcRect;
		SrcRect.xy = SrcRectMin.xy;
		SrcRect.zw = SrcRectMax.xy;
		CopySrcTextureToLocalBuffer(LocalComplexBuffer, LineIdx, Head, Stride, SrcRect);
	}
	else
	{
		CopySrcTextureToLocalBufferAndUnpack(LocalComplexBuffer, LineIdx, Head, Stride, ARRAY_LENGTH);
	}

	// FFTあるいはIFFT。複数スレッドで共有メモリを使って協調して行う
	GroupSharedStockhamFFT(bIsForward, LocalComplexBuffer, ARRAY_LENGTH, ThreadIdx);

	if (bIsForward)
	{
		PackLocalBufferAndCopyToDstTexture(LocalComplexBuffer, LineIdx, Head, Stride, ARRAY_LENGTH);
	}
	else
	{
		// エラーが起きた時にNaNが画像では負の小さな数として扱われてしまうので負の数を0にする
		NegativeToZero(LocalComplexBuffer);

		CopyLocalBufferToDstTexture(LocalComplexBuffer, bIsHorizontal, LineIdx, Head, Stride, DstRect);
	}
}

// テクスチャのRGBAに2つの複素数が格納されているものとし、縦方向のラインにFFT/IFFTを行う。
[numthreads(NUMTHREADSX, 1, 1)]
void FFTTexture2DVertical(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
	// RGBAが2複素数に対応していると解釈して行うFFT/IFFT

	const bool bIsForward = (Forward > 0);
	// 今回は用途として列処理固定
	const bool bIsHorizontal = false;

	// 各スレッドがソーステクスチャのある列の各ピクセルデータに対応
	const uint ThreadIdx = GroupThreadID;
	// 各グループがソーステクスチャのある列に対応
	const uint LineIdx = GroupID;

	// ワークバッファとして使う配列。各スレッドのローカル変数
	// RGとBAに2つの複素数が格納されている
	Complex LocalComplexBuffer[2][RADIX];

	// メモリアクセスパターン変数
	uint Head = ThreadIdx;
	const uint Stride = ARRAY_LENGTH / RADIX;

	// ソーステクスチャの画像のピクセルを間隔をあけながら8個ローカルメモリに格納する
	CopySrcTextureToLocalBuffer(LocalComplexBuffer, LineIdx, Head, Stride, SrcRectMin, SrcRectMax);

	// FFTあるいはIFFT。複数スレッドで共有メモリを使って協調して行う
	GroupSharedStockhamFFT(bIsForward, LocalComplexBuffer, ARRAY_LENGTH, ThreadIdx);

	// FFT結果を出力先テクスチャに格納する
	CopyLocalBufferToDstTexture(LocalComplexBuffer, bIsHorizontal, LineIdx, Head, Stride, DstRect); // DstRect.MinがFIntPoint(0,0)である前提がある
}

