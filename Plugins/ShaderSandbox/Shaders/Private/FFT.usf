#include "/Engine/Public/Platform.ush"

#ifndef TWO_PI
	#define TWO_PI 2.0f * 3.1415926535897932f // Common.ushからPIの値をとってきた
#endif

#define Complex float2

#define SCAN_LINE_LENGTH 512
#define RADIX 8
#define NUMTHREADSX (512 / RADIX)
#define STRIDE (512 / RADIX)

#define FFTMemoryBarrier() GroupMemoryBarrierWithGroupSync()

Texture2D<float4> SrcTexture;
RWTexture2D<float4> DstTexture;
uint2 SrcRectMin;
uint2 SrcRectMax;
uint4 DstRect;

//const bool bIsHorizontal = true;
void CopyDataSrcWindowToLocal(inout Complex LocalBuffer[2][RADIX], in uint ScanIdx, uint Loc, uint Stride, uint4 Window)
{
	for (uint i = 0; i < RADIX; i++)
	{
		LocalBuffer[0][i] = Complex(0.0f, 0.0f);
		LocalBuffer[1][i] = Complex(0.0f, 0.0f);
	}

	uint2 Pixel = uint2(Loc, ScanIdx) + Window.xy;
	UNROLL
	for (uint i = 0; i < RADIX; ++i, Pixel.x += Stride)
	{
		bool IsWindow = !(Pixel.x > Window.z);
		if (IsWindow)
		{
			// RGBAの4チャンネルを2つの複素数で保持する
			float4 SrcValue = SrcTexture[Pixel];
			LocalBuffer[0][i] = SrcValue.xy;
			LocalBuffer[1][i] = SrcValue.zw;
		}
	}
}

// Complex Multiplication using Complex as a complex number
// The full complex arithmetic is defined as:
// Real(A) = A.x,                          Image(A) = A.y
// Real(A + B) = A.x + B.x;                Imag(A + B) = A.y + B.y
// Real(A * B)  = A.x * B.x - A.y * B.y;   Imag(A * B) = A.x * B.y + B.x * A.y
Complex ComplexMult(in Complex A, in Complex B)
{
	return Complex(A.x * B.x - A.y * B.y, A.x * B.y + B.x * A.y);
}

//const bool bIsForward = true;
void Radix2FFT(inout Complex V0, inout Complex V1)
{
	V0 = V0 + V1;
	V1 = V0 - V1 - V1; // V0 - V1
}

//const bool bIsForward = true;
void Radix4FFT(inout Complex V0, inout Complex V1, inout Complex V2, inout Complex V3)
{
	// The even and odd transforms
	Radix2FFT(V0, V2); 
	Radix2FFT(V1, V3); 

	// The butterfly merge of the even and odd transforms
	// Complex(0, 1) * V3
	Complex Tmp = Complex(-V3.y, V3.x);
	Complex TmpV1 = V1;

	V0 = V0 + TmpV1;
	V1 = V2 + Tmp;
	V3 = V2 - Tmp;
	V2 = V0 - TmpV1 - TmpV1; // V0 - TmpV1
}

//const bool bIsForward = true;
void Radix8FFT(inout Complex V0, inout Complex V1, inout Complex V2, inout Complex V3, inout Complex V4, inout Complex V5, inout Complex V6, inout Complex V7)
{
	// The even and odd transforms
	Radix4FFT(V0, V2, V4, V6);
	Radix4FFT(V1, V3, V5, V7);

	// 0.7071067811865475 = 1/sqrt(2)
	float InvSqrtTwo = float(1.f) / sqrt(2.f);
	Complex Twiddle = Complex(InvSqrtTwo, InvSqrtTwo);

	Complex Rslt[8];
	Complex Tmp = ComplexMult(Twiddle, V3);

	Rslt[0] = V0 + V1;
	Rslt[4] = V0 - V1;

	Rslt[1] = V2 + Tmp;
	Rslt[5] = V2 - Tmp;

	// V4 + i V5
	Rslt[2] = Complex(V4.x - V5.y, V4.y + V5.x);
	// V4 - i V5
	Rslt[6] = Complex(V4.x + V5.y, V4.y - V5.x);

	Twiddle.x = -Twiddle.x;
	Tmp = ComplexMult(Twiddle, V7);

	Rslt[3] = V6 + Tmp;
	Rslt[7] = V6 - Tmp;

	V0 = Rslt[0];
	V1 = Rslt[1];
	V2 = Rslt[2];
	V3 = Rslt[3];
	V4 = Rslt[4];
	V5 = Rslt[5];
	V6 = Rslt[6];
	V7 = Rslt[7];
}

//const bool bIsForward = true;
void RadixFFT(inout Complex v[RADIX])
{
	Radix8FFT(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);
}

groupshared float SharedReal[2 * SCAN_LINE_LENGTH];
#define NUM_BANKS 32

void CopyLocalXToGroupShared(in Complex Local[RADIX], in uint Head, in uint Stride, in uint BankSkip)
{
	UNROLL
	for (uint i = Head, r = 0; r < RADIX; ++r, i += Stride)
	{
		uint j = i + (i / NUM_BANKS) * BankSkip;
		SharedReal[j] = Local[r].x;
	}
}

void CopyLocalYToGroupShared(in Complex Local[RADIX], in uint Head, in uint Stride, in uint BankSkip)
{
	UNROLL
	for (uint i = Head, r = 0; r < RADIX; ++r, i += Stride)
	{
		uint j = i + (i / NUM_BANKS) * BankSkip;
		SharedReal[j] = Local[r].y;
	}
}

void CopyGroupSharedToLocalX(inout Complex Local[RADIX], in uint Head, in uint Stride, in uint BankSkip)
{
	UNROLL
	for (uint i = Head, r = 0; r < RADIX; ++r, i += Stride)
	{
		uint j = i + (i / NUM_BANKS) * BankSkip;
		Local[r].x = SharedReal[j];
	}
}

void CopyGroupSharedToLocalY(inout Complex Local[RADIX], in uint Head, in uint Stride, in uint BankSkip)
{
	UNROLL
	for (uint i = Head, r = 0; r < RADIX; ++r, i += Stride)
	{
		uint j = i + (i / NUM_BANKS) * BankSkip;
		Local[r].y = SharedReal[j];
	}
}

void CopyLocalXToGroupShared(in Complex Local[RADIX], in uint Head, in uint Stride)
{
	CopyLocalXToGroupShared(Local, Head, Stride, 0);
}

void CopyLocalYToGroupShared(in Complex Local[RADIX], in uint Head, in uint Stride)
{
	CopyLocalYToGroupShared(Local, Head, Stride, 0);
}

// Exchange data with other threads by affecting a transpose 
void TransposeData(inout Complex Local[RADIX], uint AHead, uint AStride, uint BHead, uint BStride)
{
	uint BankSkip = (AStride < NUM_BANKS) ? AStride : 0;

	CopyLocalXToGroupShared(Local, AHead, AStride, BankSkip);
	FFTMemoryBarrier();
	CopyGroupSharedToLocalX(Local, BHead, BStride, BankSkip);
	FFTMemoryBarrier();
	CopyLocalYToGroupShared(Local, AHead, AStride, BankSkip);
	FFTMemoryBarrier();
	CopyGroupSharedToLocalY(Local, BHead, BStride, BankSkip);
}

// This accounts for about 9% of total time
//const bool bIsForward = true;
void Butterfly(inout Complex Local[RADIX], uint ThreadIdx, uint Length)
{
	float angle = TWO_PI * (ThreadIdx % Length) / float(Length * RADIX);

	Complex TwiddleInc;
	sincos(angle, TwiddleInc.y, TwiddleInc.x);
	Complex Twiddle = TwiddleInc;
	for (uint r = 1; r < RADIX; r++)
	{
		Local[r] = ComplexMult(Twiddle, Local[r]);
		Twiddle = ComplexMult(Twiddle, TwiddleInc);
	}
}

// Utility: As a function of j, 
// returns Ns contiguous values, then skips R*Ns values, then the next Ns values, etc
// (e.g. R = 3, Ns = 2: 0, 1, 6, 7, 12, 13..)
// (e.g. R = 2, Ns = 4: 0, 1, 2, 3, 8, 9, 10, 11,..)
uint Expand(in uint j, in uint Ns, in uint R) {
	return (j / Ns) * Ns * R + (j % Ns);
}

//const bool bIsForward = true;
// Performs a single pass Stockham FFT using group shared memory.
void GroupSharedFFT(inout Complex Local[RADIX], in const uint ArrayLength, in const uint ThreadIdx)
{
	uint NumCols = ArrayLength / RADIX;
	//uint IdxS = Expand(j, NumCols, RADIX);
	//uint IdxS = (ThreadIdx / NumCols) * ArrayLength + (ThreadIdx % NumCols);
	uint IdxS = ThreadIdx;
    // uint Ns = 1;
	// (j / Ns) * Ns * R + (j % Ns);
	// Expand(j, Ns, RADIX);
	uint IdxD = ThreadIdx * RADIX;

	RadixFFT(Local);
	TransposeData(Local, IdxD, 1, IdxS, NumCols);		

	uint Ns = RADIX;
	for (; Ns < NumCols; Ns *= RADIX)
	{
		Butterfly(Local, ThreadIdx, Ns);
		IdxD = Expand(ThreadIdx, Ns, RADIX);
		RadixFFT(Local);
		FFTMemoryBarrier();
		TransposeData(Local, IdxD, Ns, IdxS, NumCols);
	}

	Butterfly(Local, ThreadIdx, Ns);
	RadixFFT(Local);
	FFTMemoryBarrier();
}

void SplitTwoForOne(inout Complex LocalBuffer[RADIX], in uint Head, in uint Stride, in uint N)
{
	const uint Non2 = N / 2;
	
	// On input, Each thread has, in LocalBuffer, the frequencies
	// K = Head + j * Stride;  where j = 0, .., RADIX-1.. Head = ThreadIDx, Stride = NumberOfThreads

	// Write the complex FFT into group shared memory.
	
	CopyLocalXToGroupShared(LocalBuffer, Head, Stride);
	FFTMemoryBarrier();

	// Construct the transform for the two real signals in the LocalBuffer
	UNROLL

	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		//
		// K = N/2 - abs(SrcIdx - N/2)

		// DstK = SrcIdx % Non2;
		// N - k
		
		FLATTEN
		uint NmK = (K > 0) ? (N - K) : 0;

		// Z_k = LocalBuffer[i]
		// If k < N/2  : Store  F_k = 1/2 (Z_k + Z*_{N-k})
		// If k > N/2  : Compute I*G_k = 1/2 (Z_k - Z*_{N-k})
		
		// Tmp =  {+,-}ComplexConjugate( Z_{N-k})
		float Tmp = SharedReal[NmK];
		Tmp *= (K > Non2) ? -1 : 1;
		LocalBuffer[i].x += Tmp;
	}

	if (Head == 0)
	{
		LocalBuffer[0].x = 2.0f * SharedReal[0];
	}

	FFTMemoryBarrier();
	CopyLocalYToGroupShared(LocalBuffer, Head, Stride);
	FFTMemoryBarrier();

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		//
		// K = N/2 - abs(SrcIdx - N/2)

		// DstK = SrcIdx % Non2;
		// N - k
		
		FLATTEN
		uint NmK = (K > 0) ? (N - K) : 0;

		// Z_k = LocalBuffer[i]
		// If k < N/2  : Store  F_k = 1/2 (Z_k + Z*_{N-k})
		// If k > N/2  : Compute I*G_k = 1/2 (Z_k - Z*_{N-k})
		
		// Tmp =  {+,-}ComplexConjugate( Z_{N-k})
		float Tmp = -SharedReal[NmK];
		
		Tmp *= (K < Non2) ? 1 : -1;

		LocalBuffer[i].y += Tmp;
	}

	if (Head == 0)
	{
		LocalBuffer[0].y = 2.0f * SharedReal[0];
	}

	UNROLL
	for (uint i = 0; i < RADIX; ++i)
	{
		LocalBuffer[i] *= 0.5; 
	}

	UNROLL
	for (uint i = 0, K = Head; i < RADIX; ++i, K += Stride)
	{
		// If k > N/2 get G_k from I*G_k:  G_k = -I * (I G_k)
		if (K > Non2)
		{
			LocalBuffer[i] = ComplexMult(Complex(0, -1), LocalBuffer[i]);
		}
	}
}

//const bool bIsHorizontal = true;
void WriteTwoForOneFrequencyData(inout Complex LocalBuffer[2][RADIX], uint ScanIdx, uint Loc, uint Stride, uint N)
{
	FFTMemoryBarrier();

	// Decompose the transforms.  Note '0' and 'N/2' offsets will still be mixed, and have to be explicitly dealt with below. 
	SplitTwoForOne(LocalBuffer[0], Loc, Stride, N);
	FFTMemoryBarrier();
	SplitTwoForOne(LocalBuffer[1], Loc, Stride, N);

	const bool bIsFirstElement = (Loc == 0);
	const uint Non2 =  N / 2;

	uint2 Pixel = uint2(Loc, ScanIdx);
	float4 DstValue;
	UNROLL
	for (uint r = 0; r < RADIX; ++r, Pixel.x += Stride)
	{
		DstValue.xy = LocalBuffer[0][r];
		DstValue.zw = LocalBuffer[1][r];
		DstTexture[Pixel] = DstValue;

		// 以下の2ブロックの処理でパディング分の2ピクセルを埋めている

		// The N/2 element holds F_N/2 + I G_N/2
		// Write F_N/2 into this column, and G_N/2 into the the last column 
		if (Pixel.x == Non2)
		{
			DstTexture[Pixel] = float4(DstValue.x, 0.0f, DstValue.z, 0.0f);
			DstTexture[uint2(N + 1, Pixel.y)] = float4(DstValue.y, 0.0f, DstValue.w, 0.0f);
		}

		// First element holds F_o + iG_o.  
		// Write Go into the second to last column. (this is the same as G_N)
		if (bIsFirstElement)
		{
			DstValue.xy = LocalBuffer[0][0];
			DstValue.zw = LocalBuffer[1][0];

			DstTexture[uint2(0, Pixel.y)] = float4(DstValue.x, 0.0f, DstValue.z, 0.0f); // F_o 
			DstTexture[uint2(N, Pixel.y)] = float4(DstValue.y, 0.0f, DstValue.w, 0.0f); // G_o 
		}
	}
}

#if 0 // テクスチャコピー実験
[numthreads(512, 1, 1)]
#else
[numthreads(NUMTHREADSX, 1, 1)]
#endif
void TwoForOneRealFFTImage1D512x512(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
#if 0 // テクスチャコピー実験
	uint2 Pixel = uint2(GroupThreadID, GroupID);
	DstTexture[Pixel] = float4(SrcTexture[Pixel].r, 0.0f, 0.0f, SrcTexture[Pixel].a);
#else
	//const bool bIsHorizontal = (TransformType & 0x1);
	//const bool bIsForward    = (TransformType & 0x2);
	//const bool bModifyInput  = (TransformType & 0x4);
	//const bool bIsHorizontal = true;
	//const bool bIsForward    = true;
	//const bool bModifyInput  = false;

	// Threads are defined in a 1d array.
	const uint ThreadIdx = GroupThreadID;
	// The (horizontal / vertical) scan line this thread works on
	const uint ScanIdx  = GroupID;
	// The length of the signal to be transformed
	const uint SignalLength = SCAN_LINE_LENGTH;
	// The main memory access pattern for this thread.
	uint Head = ThreadIdx;
	const uint Stride = STRIDE;   

	// Thread-local memory.  Reserve two arrays since we plit .xy and .zw channels   
	Complex LocalBuffer[2][RADIX];

	uint4 SrcRect;
	SrcRect.xy = SrcRectMin.xy;
	SrcRect.zw = SrcRectMax.xy;
	CopyDataSrcWindowToLocal(LocalBuffer, ScanIdx, Head, Stride, SrcRect);

	// Fourier Transform  the data
	// This uses the group shared memory and has appropriate syncs
	GroupSharedFFT(LocalBuffer[0], SignalLength, ThreadIdx);
	GroupSharedFFT(LocalBuffer[1], SignalLength, ThreadIdx);

	// Write a frequency space buffer with two-for-one data layout
	// FFTMemoryBarrier();
	WriteTwoForOneFrequencyData(LocalBuffer, ScanIdx, Head, Stride, SignalLength);
#endif
}

//const bool bIsHorizontal = false;
void CopyDataSrcWindowToLocal(inout Complex LocalBuffer[2][RADIX], uint ScanIdx, uint Loc, uint Stride, uint2 WindowMin, uint2 WindowMax)
{
	for (uint i = 0; i < RADIX; i++)
	{
		LocalBuffer[0][i] = Complex(0.0f, 0.0f);
		LocalBuffer[1][i] = Complex(0.0f, 0.0f);
	}

	uint2 Pixel = uint2(ScanIdx, Loc) + uint2(0, WindowMin.y);
	UNROLL
	for (uint i = 0; i < RADIX; ++i, Pixel.y += Stride)
	{
		bool IsWindow = !(Pixel.y > WindowMax.y);
		if (IsWindow)
		{
			// RGBAの4チャンネルを2つの複素数で保持する
			float4 SrcValue = SrcTexture[Pixel];
			LocalBuffer[0][i] = SrcValue.xy;
			LocalBuffer[1][i] = SrcValue.zw;
		}
	}
}

//const bool bIsHorizontal = false;
void CopyDataLocalToDstWindow(in Complex LocalBuffer[2][RADIX], in uint ScanIdx, uint Loc, uint Stride, uint4 ROIRect)
{
	uint2 Pixel = uint2(ScanIdx + ROIRect.x, Loc + ROIRect.y);

	UNROLL
	for (uint r = 0; r < RADIX && Pixel.y < ROIRect.w; ++r, Pixel.y += Stride)
	{
		float4 DstValue;
		DstValue.xy = LocalBuffer[0][r];
		DstValue.zw = LocalBuffer[1][r];

		DstTexture[Pixel] = DstValue;
	}
}

[numthreads(NUMTHREADSX, 1, 1)]
void ComplexFFTImage1D512x512(uint GroupID : SV_GroupID, uint GroupThreadID : SV_GroupThreadID)
{
	//const bool bIsHorizontal = (TransformType & 0x1);
	//const bool bIsForward    = (TransformType & 0x2);
	//const bool bIsHorizontal = false;
	//const bool bIsForward    = true;

	// Threads are defined in a 1d array.
	const uint ThreadIdx = GroupThreadID;
	// The scan line this thread works on
	const uint ScanIdx  = GroupID;
	// The length of the signal to be transformed
	const uint SignalLength = SCAN_LINE_LENGTH;
	// The main memory access pattern for this thread.
	uint Head = ThreadIdx;
	const uint Stride = STRIDE;   

	// Thread-local memory.  Reserve two arrays since we plit .xy and .zw channels   
	Complex LocalBuffer[2][RADIX];

	// Load the local memory from the source texture
	// LocalBuffer[0][] holds .xy,  LocalBuffer[1][] holds.zw

	// Read from an image buffer
	CopyDataSrcWindowToLocal(LocalBuffer, ScanIdx, Head, Stride, SrcRectMin, SrcRectMax);
	//FFTMemoryBarrier();

	// Fourier Transform  the data
	// This uses the group shared memory and has appropriate syncs
	GroupSharedFFT(LocalBuffer[0], SignalLength, ThreadIdx);
	GroupSharedFFT(LocalBuffer[1], SignalLength, ThreadIdx);

	// Copy data to target buffer
	// Write image space data.
	//FFTMemoryBarrier();
	CopyDataLocalToDstWindow(LocalBuffer, ScanIdx, Head, Stride, DstRect); // DstRect.MinがFIntPoint(0,0)である前提
}

